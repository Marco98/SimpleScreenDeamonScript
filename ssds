#!/bin/bash
#---------------------SSDS BY MARCO98-----------------------
#----------------------CONFIGURATION------------------------
NAME="SCREENNAME"
#NAME OF THE SCREEN INSTANCE
NEWUSER="USER"
#USER OF SCREEN PROCESS. EMPTY FOR NO SWITCH.
NEWUSERPASSWD=""
##THIS FUNCTION IS DANGEROUS. I HIGHLY RECOMEND TO NOT USE IT!
#PASSWORD OF THE USER. LEAVE EMPTY IF NOT REQUIRED.
DIR="/WRK/DIR"
#WORKING DIRECTORY. EMPTY FOR NO SWITCH.
EXECCOMMAND="./FILETOEXECUTE"
#COMMAND TO EXECUTE
SHUTDOWNCMD="exit"
#IF EMPTY STRING CTRL-C WILL BE SENT.
USEWATCHDOG="false"
#IF ENABLED, PROGRAM WILL BE RESTARTED AFTER CLOSE/CRASH/....
EXCONFIG="ssdsconfig"
#IF NOT EMPTY, SSDS WILL USE A EXTERNAL CONFIGURATION
#------------------------------------------------------------
if [ ! -z $EXCONFIG ] && [ -e $EXCONFIG ]; then
	source $EXCONFIG
fi
if [ $USEWATCHDOG == "true" ]
then
	mkdir -p /tmp/ssds/ &>/dev/null
	EXECCOMMAND="while [ -e \"/tmp/ssds/$NAME\" ];do $EXECCOMMAND;if [ -e \"/tmp/ssds/$NAME\" ];then echo -e \"\033[31mSSDS: Watchdog Triggered!\033[0m\";fi;done"
fi
if ! [ -z "${DIR// }" ]
then
	EXECCOMMAND="cd $DIR;$EXECCOMMAND"
fi
setupsu() {
	if [[ -z "${NEWUSER// }" ]] || [[ "$USER" == "$NEWUSER" ]]
	then
		local SU="/bin/bash"
	else
		local SU="su $NEWUSER -s /bin/bash"
	fi
	echo $SU
}
color() {
	local n="\033[0m"
	local g="\033[32m"
	local y="\033[33m"
	local r="\033[31m"
	eval "echo -en \"\$$1\""
	echo -e "$2$n"
}
running() {
	local out=$(screen -list | sed '1d' | sed '$d')
	if echo $out | grep -q $NAME
	then
		echo "true"
	else
		echo "false"
	fi
}
start() {
	if [ $(running) == "true" ]
	then
		color r "$NAME: Deamon is already active"
		exit 2
	fi
	if [ $USEWATCHDOG == "true" ]
	then
		touch /tmp/ssds/$NAME &>/dev/null
	fi
	screen -AdmS $NAME $(setupsu) -c "$EXECCOMMAND"
	if ! [ -z $NEWUSERPASSWD ]; then
		screen -r -x $NAME -p 0 -X stuff "$NEWUSERPASSWD$(printf \\r)"
	fi
	color g "$NAME: Deamon started"
}
stop() {
	if ! [ $(running) == "true" ]
	then
		color r "$NAME: Deamon is inactive"
		exit 3
	fi
	if [ $USEWATCHDOG == "true" ]
	then
		rm /tmp/ssds/$NAME &>/dev/null
	fi
	if [[ -z "${SHUTDOWNCMD// }" ]]
	then
		screen -r -x $NAME -p 0 -X stuff ^C
	else
		screen -r -x $NAME -p 0 -X stuff "$SHUTDOWNCMD$(printf \\r)"
	fi
	printf "\033[32m$NAME: Shutdown signal has been sent..."
	while [ $(running) == "true" ]
	do
		sleep 1s
		printf "."
	done
	echo -en "\n"
}
restart() {
	stop
	start
}
status() {
	if [ $(running) == "true" ]
	then
		color g "$NAME: Deamon is active"
		exit 4
	else
		color r "$NAME: Deamon is inactive"
		exit 5
	fi
}
console() {
	if ! [ $(running) == "true" ]
	then
		color r "$NAME: Deamon is inactive"
		exit 6
	fi
	screen -r $NAME
}
own() {
	if ! [[ -z "${USER// }" ]]
	then
		chown -R $USER:$USER $DIR
	fi
}
case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	status)
		status
		;;
	restart)
		restart
		;;
	console)
		console
		;;
	chown)
		own
		;;
	*)
		echo "Usage: ./ssds {start|stop|restart|status|chown|console}"
		exit 1
		;;
esac
exit 0
